# Global Variables
$reg_software64 = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*"
$reg_software32 = "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*"

function Print-Banner {
    $banner = @"
 ____    _    ____     ____ _   _ ___   ____                       _ _            ____ _               _
/ ___|  / \  |  _ \   / ___| | | |_ _| / ___|  ___  ___ _   _ _ __(_) |_ _   _   / ___| |__   ___  ___| | __
\___ \ / _ \ | |_) | | |  _| | | || |  \___ \ / _ \/ __| | | | '__| | __| | | | | |   | '_ \ / _ \/ __| |/ /
 ___) / ___ \|  __/  | |_| | |_| || |   ___) |  __/ (__| |_| | |  | | |_| |_| | | |___| | | |  __/ (__|   <
|____/_/   \_\_|      \____|\___/|___| |____/ \___|\___|\__,_|_|  |_|\__|\__, |  \____|_| |_|\___|\___|_|\_\
by randomstr1ng                                                          |___/

This script checks the security settings in the registry of the SAP GUI for Windows.

"@
    Write-Output $banner
}

function Check-CVE-2025-0055 {
    param(
        [string]$sapgui_arch
    )
    if ($sapgui_arch -eq "\Software") {
        $sapgui_version = ((Get-ItemProperty 'C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe').VersionInfo).FileVersion
    } elseif ($sapgui_arch -eq "\Software\Wow6432Node") {
        $sapgui_version = ((Get-ItemProperty 'C:\Program Files (x86)\SAP\FrontEnd\SAPGUI\saplogon.exe').VersionInfo).FileVersion
    }
    if ($sapgui_version -lt "8000.1.9.1163") {
        Write-Host "SAP GUI for Windows is vulnerable to CVE-2025-0055" -BackgroundColor Red
        Write-Host "Installed version: $($sapgui_version)" -BackgroundColor Red
    } else {
        Write-Host "SAP GUI for Windows is not vulnerable to CVE-2025-0055" -BackgroundColor Green
        Write-Host "Installed version: $($sapgui_version)" -BackgroundColor Green
    }
}

function Check-Installed-SAPGUI {
    $result = $null
    $64bit = "\Software"
    $32bit = "\Software\Wow6432Node"

    if ($result = Get-ItemProperty $reg_software64 | where-object DisplayName -like "SAP GUI*") {
        Write-Host "SAP GUI for Windows 64bit is installed" -BackgroundColor Green
        return $64bit
    } elseif ($result = Get-ItemProperty $reg_software32 | where-object DisplayName -like "SAP GUI*") {
        Write-Host "SAP GUI for Windows 32bit is installed" -BackgroundColor Green
        return $32bit
    } else {
        Write-Output "SAP GUI for Windows is not installed" -BackgroundColor Red
        Exit
    }
}

function Print-Description {
    param(
        [string]$description,
        [string]$check_result
    )
    Write-Host
    Write-Host $description
    Write-Host $check_result
    Write-Host
    Write-Host "==================================================================="
}

function General-SecurityCheck {
    param (
        [string[]]$sapgui_arch
    )
    $result = $null
    $reg_base_security = "HKLM:$($sapgui_arch)\SAP\SAPGUI Front\SAP Frontend Server\Security"

    # Get Security level
    $security_level_desc = "Determines the status in which the security module is to run."
    if ($result = Get-ItemProperty -Path $reg_base_security -Name "SecurityLevel" -ErrorAction SilentlyContinue) {
        if ($result.SecurityLevel -eq 0) {
            $security_level = "SecurityLevel: Disabled (Value: 0)"
        } elseif ($result.SecurityLevel -eq 2) {
            $security_level = "SecurityLevel: Strict Deny mode (Value: 2)"
        }
        Print-Description -description $security_level_desc -check_result $security_level
    } else {
        Print-Description -description $security_level_desc -check_result "SecurityLevel: Customized (Value: 1) (Default)"
    }
    # Get security rules process order
    $security_rules_order_desc = "Defines which sets of rules are processed. Rules delivered by SAP will be processed always before all other sets of rules."
    if ($result = Get-ItemProperty -Path $reg_base_security -Name "SecurityRulesOrder" -ErrorAction SilentlyContinue) {
        if ($result.SecurityRulesOrder -eq 0) {
            $security_rules_order = "Configuration: Only administrator rules (Value: 0)"
        } elseif ($result.SecurityRulesOrder -eq 2) {
            $security_rules_order = "Configuration: 1.User rules; 2.Administrator rules (Value: 2)"
        } elseif ($result.SecurityRulesOrder -eq 3) {
            $security_rules_order = "Configuration: Only user rules (Value: 3)"
        }
        Print-Description -description $security_rules_order_desc -check_result "Configuration: $($result.SecurityRulesOrder)"
    } else {
        Print-Description -description $security_rules_order_desc -check_result "Configuration: 1.Administrator rules; 2.User rules (Value: 1) (default)"
    }
    # Get default action
    $default_action_desc = "Configure what is to happen if no matching rule was found."
    if ($result = Get-ItemProperty -Path $reg_base_security -Name "DefaultAction" -ErrorAction SilentlyContinue) {
        if ($result.DefaultAction -eq 0) {
            $default_action = "DefaultAction: Allow (Value: 0)"
        } elseif ($result.DefaultAction -eq 2) {
            $default_action = "DefaultAction: Deny (Value: 2)"
        }
        Print-Description -description $default_action_desc -check_result $default_action
    } else {
        Print-Description -description $default_action_desc -check_result "DefaultAction: Ask (Value: 1) (default)"
    }
    # get display notrification configuration
    $display_notification_desc = "Notification popup will be displayed when a request was denied."
    if ($result = Get-ItemProperty -Path $reg_base_security -Name "DisplayNotifications" -ErrorAction SilentlyContinue) {
        if ($result.DisplayNotifications -eq 0) {
            $display_notification = "DisplayNotifications: Disabled (Value: 0)"
        }
        Print-Description -description $display_notification_desc -check_result $display_notification
    } else {
        Print-Description -description $display_notification_desc -check_result "DisplayNotifications: Enabled (Value: 1) (default)"
    }
    # Get Path of Init Save Directory
    $init_save_dir_desc = "Configure the default path and folder for users to save the reported information in case of an access denial due to security rules."
    if ($result = Get-ItemProperty -Path $reg_base_security -Name "InitSaveDir" -ErrorAction SilentlyContinue) {
        $init_save_dir = "InitSaveDir: $($result.InitSaveDir)"
        Print-Description -description $init_save_dir_desc -check_result $init_save_dir
    } else {
        Print-Description -description $init_save_dir_desc -check_result "InitSaveDir: -Not Set-"
    }
    # Get logging configuration for security related events
    $log_security_events_desc = "Activate the creation of a log file that contains all security-relevant events for which security rules may have to be created."
    if ($result = Get-ItemProperty -Path $reg_base_security -Name "ActivateLogging" -ErrorAction SilentlyContinue) {
        if ($result.ActivateLogging -eq 1) {
            $log_security_events = "ActivateLogging: ON (Value: 1)"
        }
        Print-Description -description $log_security_events_desc -check_result $log_security_events
    } else {
        Print-Description -description $log_security_events_desc -check_result "ActivateLogging: OFF (Value: 0) (default)"
    }
    # Get path of log file for security related events
    $log_file_path_desc = "Configure the folder in which the file will be written."
    if ($result = Get-ItemProperty -Path $reg_base_security -Name "LoggingDestinationDir" -ErrorAction SilentlyContinue) {
        $log_file_path = "LoggingDestinationDir: $($result.LoggingDestinationDir)"
        Print-Description -description $log_file_path_desc -check_result $log_file_path
    } else {
        Print-Description -description $log_file_path_desc -check_result "LoggingDestinationDir: -Not Set-"
    }
    # Get path for custom saprules.xml file
    $custom_security_rules_desc = "The location value contains only the path to the file, not the file name. This file name is predefined and cannot be changed by the administrator. Filename: saprules.xml"
    if ($result = Get-ItemProperty -Path $reg_base_security -Name "Location" -ErrorAction SilentlyContinue) {
        $custom_security_rules = "Location: $($result.Location)"
        Print-Description -description $custom_security_rules_desc -check_result $custom_security_rules
    } else {
        Print-Description -description $custom_security_rules_desc -check_result "Location: -Not Set-"
    }
}

function InputHistory-SecurityCheck {
    param(
        [string[]]$sapgui_arch
    )
    $hklm_reg_path = "HKLM:$($sapgui_arch)\SAP\SAPGUI Front\SAP Frontend Server\LocalData"
    $hkcu_reg_path = "HKCU:$($sapgui_arch)\SAP\SAPGUI Front\SAP Frontend Server\LocalData"
    # Check if input history is enabled
    $input_history_desc = "The input history is a feature that allows users to store and retrieve previously entered data. This feature is enabled by default."
    if (($result = Get-ItemProperty -Path $hklm_reg_path -Name "DisableHistory" -ErrorAction SilentlyContinue) -or ($result = Get-ItemProperty -Path $hkcu_reg_path -Name "DisableHistory" -ErrorAction SilentlyContinue)) {
        if ($result.DisableHistory -eq 1) {
            $input_history = "DisableHistory: OFF (Value: 1)"
        }
        Print-Description -description $input_history_desc -check_result $input_history
    } else {
        Print-Description -description $input_history_desc -check_result "DisableHistory: ON (Value: 0) (default)"
    }

    # check for encryption of input history
    $input_history_encryption_desc = "Should there be any reason to keep using the obfuscation instead of turning off the input history when both encryptions fail, set this registry key. (SAP Note: 3472837)"
    if (($result = Get-ItemProperty -Path $hklm_reg_path -Name "HistoryIgnoreDisabledEncryption" -ErrorAction SilentlyContinue) -or ($result = Get-ItemProperty -Path $hkcu_reg_path -Name "HistoryIgnoreDisabledEncryption" -ErrorAction SilentlyContinue)) {
        if ($result.HistoryIgnoreDisabledEncryption -eq 1) {
            $input_history_encryption = "HistoryIgnoreDisabledEncryption: ON (Value: 1)"
        }
        Print-Description -description $input_history_encryption_desc -check_result $input_history_encryption
    } else {
        Print-Description -description $input_history_encryption_desc -check_result "HistoryIgnoreDisabledEncryption: OFF (Value: 0) (default)"
    }
    # history expection per input field
    $input_history_exception_desc = "The values of these registry string values should contain the dynpro names of the input fields which should have no history"
    $result = Get-ItemProperty -Path $hklm_reg_path
    $exceptionKeys = $result.PSObject.Properties | Where-Object { $_.Name -like 'Exception*' }
    if ($exceptionKeys.Count -eq 0) {
        Print-Description -description $input_history_exception_desc -check_result "No Exception keys found."
    } else {
        Write-Host
        Write-Host $input_history_desc
        foreach ($key in $exceptionKeys) {
            Write-Output "$($key.Name)=$($key.Value)"
        }
        Write-Host
        Write-Host "==================================================================="
    }
}

function GUIScript-SecurityCheck {
    param (
        [string[]]$sapgui_arch
    )

    $hklm_reg_path = "HKLM:$($sapgui_arch)\SAP\SAPGUI Front\SAP Frontend Server\Security"
    $hkcu_reg_path = "HKCU:$($sapgui_arch)\SAP\SAPGUI Front\SAP Frontend Server"
    $hkcu_2_reg_path = "HKCU:$($sapgui_arch)\SAP\SAPGUI Front\SAP Frontend Server\Security"
    $hklm_2_reg_path = "HKLM:$($sapgui_arch)\SAP\SAPGUI Front\SAP Frontend Server\Scripting"
    # check if GUI scripting is enabled
    $gui_scripting_desc = "The GUI scripting is a feature that allows users to automate SAP GUI for Windows."
    if ($result = Get-ItemProperty -Path $hklm_reg_path -Name "UserScripting" -ErrorAction SilentlyContinue) {
        if ($result.UserScripting -eq 0) {
            $gui_scripting = "UserScripting: OFF (Value: 0)"
        }
        Print-Description -description $gui_scripting_desc -check_result $gui_scripting
    } elseif ($result = Get-ItemProperty -Path $hkcu_reg_path -Name "Scripting" -ErrorAction SilentlyContinue) {
        if ($result.Scripting -eq 0) {
            $gui_scripting = "Scripting: OFF (Value: 0)"
        }
        Print-Description -description $gui_scripting_desc -check_result $gui_scripting
    } elseif ($result = Get-ItemProperty -Path $hkcu_2_reg_path -Name "UserScripting" -ErrorAction SilentlyContinue) {
        if ($result.UserScripting -eq 0) {
            $gui_scripting = "UserScripting: OFF (Value: 0)"
        }
        Print-Description -description $gui_scripting_desc -check_result $gui_scripting
    } else {
        Print-Description -description $gui_scripting_desc -check_result "UserScripting / Scripting: ON (Value: 1) (default)"
    }

    # warn user when connecting using gui scripting
    $scripting_conn_warning_desc = "A user may want to be notified whenever a script attempts to open a connection to an SAP system"
    if ($result = Get-ItemProperty -Path $hkcu_2_reg_path -Name "WarnOnConnection" -ErrorAction SilentlyContinue) {
        if ($result.WarnOnConnection -eq 0) {
            $scripting_conn_warning = "WarnOnConnection: OFF (Value: 0)"
        }
        Print-Description -description $scripting_conn_warning_desc -check_result $scripting_conn_warning
    } else {
        Print-Description -description $scripting_conn_warning_desc -check_result "WarnOnConnection: ON (Value: 1) (default)"
    }

    # warn user when attach to a running SAP GUI instance
    $scripting_attach_warning_desc = "A user may want to be notified whenever a script attempts to attach to a running SAP GUI instance"
    if ($result = Get-ItemProperty -Path $hkcu_2_reg_path -Name "WarnOnAttach" -ErrorAction SilentlyContinue) {
        if ($result.WarnOnAttach -eq 0) {
            $scripting_attach_warning = "WarnOnAttach: OFF (Value: 0)"
        }
        Print-Description -description $scripting_attach_warning_desc -check_result $scripting_attach_warning
    } else {
        Print-Description -description $scripting_attach_warning_desc -check_result "WarnOnAttach: ON (Value: 1) (default)"
    }

    # enable/disable if scripting is allowed to write data to disk
    $scripting_write_disk_desc = "The scripting functionality to write information to the hard disk can be disabled (SAP Note 867260)"
    if ($result = Get-ItemProperty -Path $hklm_2_reg_path -Name "AllowWriteToDisk" -ErrorAction SilentlyContinue) {
        if ($result.AllowWriteToDisk -eq 1) {
            $scripting_write_disk = "AllowWriteToDisk: ON (Value: 1)"
        }
        Print-Description -description $scripting_write_disk_desc -check_result $scripting_write_disk
    } else {
        Print-Description -description $scripting_write_disk_desc -check_result "AllowWriteToDisk: OFF (Value: 0) (default)"
    }

}

Print-Banner
$installed_arch = Check-Installed-SAPGUI
Write-Host "==================================================================="
Check-CVE-2025-0055 -sapgui_arch $installed_arch
Write-Host "==================================================================="
General-SecurityCheck -sapgui_arch $installed_arch
InputHistory-SecurityCheck -sapgui_arch $installed_arch
GUIScript-SecurityCheck -sapgui_arch $installed_arch
InputHistory-SecurityCheck -sapgui_arch $installed_arch
GUIScript-SecurityCheck -sapgui_arch $installed_arch